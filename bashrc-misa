# # # # # # # # # # # # # # # # # # #
# Home networks
# # # # # # # # # # # # # # # # # # # #
declare -x NET=172.16.16.0/24
declare -x NET6=2001:470:28:9a3::/64


# # # # # # # # # # # # # # # # # # # # 
# Language and location
# # # # # # # # # # # # # # # # # # # # 
# declare -x LOCPATH=$HOME/.locale 
declare -x LANG="en_GB.UTF-8"
declare -x LC_COLLATE="en_GB.UTF-8"
declare -x LC_CTYPE="en_GB.UTF-8"
declare -x LC_MESSAGES="en_GB.UTF-8"
declare -x LC_MONETARY="en_GB.UTF-8"
declare -x LC_NUMERIC="en_GB.UTF-8"
declare -x LC_TIME="en_GB.UTF-8"
declare -x LC_ALL="en_GB.UTF-8"

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
# Set windows title (xterm et al.)
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
declare -x PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'

# = = = = = = = = = = = = = = = = = = = = = = = =
# If not running interactively, don't do anything
# = = = = = = = = = = = = = = = = = = = = = = = =
case $- in
     *i*) ;;
       *) return;;
esac

# Don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it
shopt -s histappend

# For setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# Make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|xterm-256colour|xterm-256color|*-256color|*color|*colour) color_prompt=yes;
    ;;
esac
 
# = = = = = = = = = = = = = = = = = = = 
# Force no color prompt:
# = = = = = = = = = = = = = = = = = = = 
# color_prompt=no

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    # echo "color prompt = yes (TERM = $TERM)"
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;34m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    # \[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt


# - - - - - - - - - - - - - - - - - - - - - - - - - -
# If this is an xterm set the title to user@host:dir
# - - - - - - - - - - - - - - - - - - - - - - - - - -
case "$TERM" in
    xterm*|rxvt*|screen*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h:\w\a\]$PS1"
        # PS1='\[\e[1;32m\]\u@\h:\h\\$ '
;;
*)
;;
esac

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# Aliases
#    You may want to put all your additions into a separate file like
#    ~/.bash_aliases, instead of adding them here directly.
#    See /usr/share/doc/bash-doc/examples in the bash-doc package.
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
# Bash completion
#    Enable programmable completion features (you don't need to enable
#    this, if it's already enabled in /etc/bash.bashrc and /etc/profile
#    sources /etc/bash.bashrc).
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
	  . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# = = = = = = = = = = = = = = = = = = = 
# colored GCC warnings and errors
# = = = = = = = = = = = = = = = = = = = 
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# = = = = = = = = = = = = = = = = = = = 
# vim
# = = = = = = = = = = = = = = = = = = = 
# Set vim as default editior
declare -x EDITOR=vim


# = = = = = = = = = = = = = = = = = = = 
# PAGERs
# = = = = = = = = = = = = = = = = = = = 
declare -x PAGER='less -s -X -F'
declare -x MANPAGER='less -s -X -F'


# = = = = = = = = = = = = = = = = = = = 
# ssh-agent
# = = = = = = = = = = = = = = = = = = = 
[[ -n "${SSH_AUTH_SOCK}" && "${SSH_AUTH_SOCK}" != "${HOME}/.ssh/ssh_auth_sock" ]] && {
    #printf "Creating link: ${HOME}/.ssh/ssh_auth_sock -> ${SSH_AUTH_SOCK}\n" 
        ln -fs "${SSH_AUTH_SOCK}" "${HOME}/.ssh/ssh_auth_sock";
} 

# [[ pgrep -u mier ssh-agent > /dev/null ]] && {
#    declare 
#}


# = = = = = = = = = = = = = = = = = = = 
# screen prompt
# = = = = = = = = = = = = = = = = = = = 
# declare -x PROMPT_COMMAND='echo -n -e "\033k\033\134"'


# = = = = = = = = = = = = = = = = = = = 
# mail 
# = = = = = = = = = = = = = = = = = = = 
# declare -x MAIL="$HOME/Maildir/"
# declare -x MAIL=/var/mail/$USER


# = = = = = = = = = = = = = = = = = = = 
# PATH 
# = = = = = = = = = = = = = = = = = = = 
# declare -x PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin:${HOME}/bin
# declare -x PATH=/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:${HOME}/bin
# Hm, isn't the 'declare -x' or 'export' necessary for setting the PATH environment variable?
# Seems to work with out either of them (but cowardly exports PATH below anyway):
PATH=/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

#
# Include ~/bin and/or ~/local/bin if they exist
# and not already in PATH.
home_bin_in_path=$(python3 -c 'import os; import sys; args=sys.argv[1:]; print(1) if f"{os.environ["HOME"]}/bin" in sys.argv[1] else print(0);' $(echo $PATH))
home_local_bin_in_path=$(python3 -c 'import os; import sys; args=sys.argv[1:]; print(1) if f"{os.environ["HOME"]}/.local/bin" in sys.argv[1] else print(0);' $(echo $PATH))

echo home_bin_in_path = $home_bin_in_path 
read -p "press enter to continue" foo

echo home_local_bin_in_path = $home_local_bin_in_path 
read -p "press enter to continue" foo

echo
[[ -d "${HOME}/bin" &&  "${home_bin_in_path}" == "0" ]] && {
    declare -x PATH="${PATH}:${HOME}/bin"
    #echo "Adding \$HOME/bin to \$PATH"
    #echo "\$PATH = $PATH"
}
# || {
    #echo "Not adding \$HOME/bin to \$PATH"
    #echo "\$PATH = $PATH"
    #echo
# }
# [[ -d "${HOME}/.local/bin" ]]  && {
echo
[[ -d "${HOME}/.local/bin" &&  "${home_local_bin_in_path}" == "0" ]] && {
    declare -x PATH="${PATH}:${HOME}/.local/bin"
    # echo "Adding \$HOME/.local/bin to \$PATH"
    # echo "\$PATH = $PATH"
}
# || {
    # echo "Not adding \$HOME/.local/bin to \$PATH"
    # echo "\$PATH = $PATH"
    # echo 
# }


# = = = = = = = = = = = = = = = = = = = 
# 2024-05-28
# Poetry – https://python-poetry.org/docs
# = = = = = = = = = = = = = = = = = = = 
declare -x POETRY_PATH="/home/mier/.poetry"
[[ -d $POETRY_PATH ]] && declare -x PATH="${POETRY_PATH}/bin:${PATH}"


# = = = = = = = = = = = = = = = = = = = 
# 2024-05-28
# pyenv – https://github.com/pyenv/pyenv-installer
# = = = = = = = = = = = = = = = = = = = 
declare -x PYENV_ROOT="$HOME/.pyenv"
[[ -d "${PYENV_ROOT}/bin" ]] && declare -x PATH="${PYENV_ROOT}/bin:${PATH}"
eval "$(pyenv init -)"


# = = = = = = = = = = = = = = = = = = = 
# Created by `pipx` on 2024-06-29 04:27:53
# = = = = = = = = = = = = = = = = = = = 
home_local_bin_in_path=$(python3 -c 'import os; import sys; args=sys.argv[1:]; print(1) if f"{os.environ["HOME"]}/.local/bin" in sys.argv[1] else print(0);' $(echo $PATH))
[[ -d ~/.local/bin && "${home_local_bin_in_path}" == "0" ]] && \
    declare -x PATH="$PATH:/home/mier/.local/bin" # \
    # || echo "pipx: not adding $HOME/.local/bin to PATH"

[[ -x ~/.pyenv/shims/register-python-argcomplete ]] && {
    # pipx completion
    eval "$(register-python-argcomplete pipx)"
}


# = = = = = = = = = = = = = = = = = = = 
# python shell startup stuff
# = = = = = = = = = = = = = = = = = = = 
declare -x PYTHONSTARTUP="${HOME}/.pythonrc"

# = = = = = = = = = = = = = = = = = = = 
# Misc env variables
# = = = = = = = = = = = = = = = = = = = 
[[ -r "${HOME}/.bash_env" ]] && {
    source "${HOME}/.bash_env"
}
