" = = = = = = = = = = = = = = = = = = = = = = = = =
" .vimrc
" = = = = = = = = = = = = = = = = = = = = = = = = =
" version 6.0

" Enable pathogen
execute pathogen#infect()

" vim-jedi automatic initialization
let g:jedi#auto_initialization = 1

" if &cp | set nocp | endif
" let s:cpo_save=&cpo
" set cpo&vim
" nmap gx <Plug>NetrwBrowseX
" nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
" let &cpo=s:cpo_save
" unlet s:cpo_save

" Format options (:set formatoptions=characters):
    " t: automatically wrap text
    " c: automatically wrap comments; insert comment leader 
    " r: insert comment leader in a comment when a new line is inserted
    " o: insert comment leader in a comment when a new line is created using the O and o commands
    " b: wrap only on blanks you type, but only if they occur before 'textwidth'
    " 1: do not break a line in insert mode; only let gq break the lines
    " 2: format based on indent of second line, not the first
    " q: allow gc to format comments
    
" Example:
"   :set formatoptions=tcro1
set formatoptions=tcroql

" - - - - - - - - - - - - - - - - - - - - - - - - -
" :au :autocmd
" - - - - - - - - - - - - - - - - - - - - - - - - -
autocmd FileType * set formatoptions=tcroql


"--------------------------------------------
" Indent automatically depending on filetype
"--------------------------------------------
filetype indent on
filetype plugin indent on

"--------------------------------------------
" Auto-indentation
" Aliases: 'autoindent', 'ai'
"--------------------------------------------
set autoindent

"--------------------------------------------
" Write the contents of the file, if it has been
" modified, on each :next, :rewind, :last, :first,
" :previous, :stop, :suspend, :tag, :!, make, 
" CTRL-], and CTRL-^ command; and when a :buffer,
" CTRL-O, CTRL-I, '{A-Z0-9}, or `{A-Z0-9} command
" takes one to another file.
" Aliases: 'autowrite', 'aw'
"--------------------------------------------
set autowrite

"--------------------------------------------
" Line numbering
" Aliases: 'number', 'nu'
"--------------------------------------------
set number

"--------------------------------------------
" Syntax highlighting 
"--------------------------------------------
syntax on

" - - - - - - - - - - - - - - - - - - - - - - - - -
" Case insensitive search
" Aliases: 'incsearch', 'ic'
" - - - - - - - - - - - - - - - - - - - - - - - - -
set ignorecase

" - - - - - - - - - - - - - - - - - - - - - - - - -
" While typing a search command, show where the
" pattern, as it was typed so far, matches.
" Aliases: 'incsearch', 'is'
" - - - - - - - - - - - - - - - - - - - - - - - - -
set incsearch

" - - - - - - - - - - - - - - - - - - - - - - - - -
" Higlight search
" - - - - - - - - - - - - - - - - - - - - - - - - -
" set hls
set nohls

" Wrap text instead of being on one line
set lbr
set backspace=2
set fileencodings=utf-8,ucs-bom,default,latin1
set helplang=en
set modelines=0
" set window=0
" vim: set ft=vim :
"  
"  tabstop
"  The width of a hard tabstop measured in "spaces" -- effectively the
"  (maximum) width of an actual tab character.
"  
set tabstop=4 softtabstop=0 
"  shiftwidth
"  The size of an "indent". It's also measured in spaces, so if your code
"  base indents with tab characters then you want shiftwidth to equal the
"  number of tab characters times tabstop. This is also used by things like
"  the =, > and < commands.
set shiftwidth=4

"  softtabstop
"  Setting this to a non-zero value other than tabstop will make the tab key
"  (in insert mode) insert a combination of spaces (and possibly tabs) to simulate tab stops at this width.
  
"  expandtab
"  Enabling this will make the tab key (in insert mode) insert spaces instead
"  of tab characters. This also affects the behavior of the retab command.
set expandtab
  
"  smarttab
"  Enabling this will make the tab key (in insert mode) insert spaces or
"  tabs to go to the next indent of the next tabstop when the cursor is at
"  the beginning of a line (ie: the only preceding characters are whitespace).
set smarttab
 
" # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
" Change colorscheme 
"   colorscheme morning
"   colorscheme delek
"   colorscheme elflord
"   colorscheme default
" # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 
"" Adapt to time of day...
"" Progressively check higher values... falls out on first "true"
"" (note addition of zero ... this guarantees return from function is numeric
"    echo strftime("%H:%M")

    " 00:00-07:59
	if strftime("%H") < 8 + 0
        colorscheme elflord       
"        colorscheme elflord 
"        colorscheme maroloccio
"	    colorscheme darkburn
"		echo "setting colorscheme to darkblue"
    " 08:00-17:59
	elseif strftime("%H") < 18  + 0
		colorscheme default
"	    colorscheme sienna
"	    colorscheme bclear
    " 18:00-20:59
	elseif strftime("%H") < 21 + 0
        colorscheme default       
"       colorscheme elflord 
"       colorscheme darkburn 
"       colorscheme bclear
"       colorscheme sienna 
"       colorscheme morning 
    " 18:00-23:59
	else
        colorscheme elflord 
"        colorscheme maroloccio
"		colorscheme darkburn
	endif
" colorscheme default
" colorscheme elflord
" 
" #############################
" Macro definitions
" #############################
" let @f = 'iF^\infty '
" let @g = 'iG^\infty '
" let @r = 'i\rightarrow '
" let @n = 'i\lnot '
" let @m = 'i\mathcal{€kr} €ýa '
" let @o = 'i\models '
" let @d = 'i\Diamond{€kr} €ýa '
" let @b = 'i\Box{€kr} €ýa  '
" let @t = 'i\text{}:€kb'

" ############################
" Mappings
" ############################
" An example mapping that will
" surround a word with curly braces:
map <F5> bi{<Esc>ea}<Esc>

"vim: syntax=vim
